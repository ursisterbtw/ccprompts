# Alertmanager Configuration for CCPrompts Development Environment
# Handles alert routing, grouping, and notifications

global:
  # Global configuration
  smtp_smarthost: 'localhost:587'
  smtp_from: 'alerts@ccprompts.dev'
  smtp_require_tls: false

# Alert routing tree
route:
  # Default settings for all alerts
  group_by: ['alertname', 'severity', 'service']
  group_wait: 30s
  group_interval: 5m
  repeat_interval: 12h
  receiver: 'default-receiver'
  
  # Route alerts based on severity and service
  routes:
    # Critical alerts - immediate notification
    - match:
        severity: critical
      receiver: 'critical-alerts'
      group_wait: 10s
      repeat_interval: 5m
      
    # Database alerts
    - match:
        service: database
      receiver: 'database-team'
      group_by: ['alertname', 'instance']
      
    # Security alerts
    - match:
        service: security
      receiver: 'security-team'
      group_wait: 0s
      repeat_interval: 1h
      
    # Development/CI alerts
    - match:
        service: ci-cd
      receiver: 'dev-team'
      group_by: ['alertname', 'job']
      repeat_interval: 30m
      
    # System resource alerts
    - match:
        service: system
      receiver: 'infrastructure-team'
      group_by: ['alertname', 'instance']
      repeat_interval: 2h
      
    # Network alerts
    - match:
        service: network
      receiver: 'network-team'
      group_by: ['alertname', 'device']
      
    # Container alerts
    - match:
        service: container
      receiver: 'container-team'
      group_by: ['alertname', 'name']

# Alert receivers and notification methods
receivers:
  # Default receiver for development
  - name: 'default-receiver'
    webhook_configs:
      - url: 'http://devcontainer:8080/webhooks/alerts'
        send_resolved: true
        http_config:
          basic_auth:
            username: 'alert-webhook'
            password: 'dev-password'
        title: 'CCPrompts Alert: {{ .GroupLabels.alertname }}'
        
  # Critical alerts - multiple notification channels
  - name: 'critical-alerts'
    webhook_configs:
      - url: 'http://devcontainer:8080/webhooks/critical-alerts'
        send_resolved: true
        title: 'üö® CRITICAL: {{ .GroupLabels.alertname }}'
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#critical-alerts'
        title: 'üö® Critical Alert in CCPrompts Development'
        text: |
          {{ range .Alerts }}
          *Alert:* {{ .Annotations.summary }}
          *Description:* {{ .Annotations.description }}
          *Severity:* {{ .Labels.severity }}
          *Service:* {{ .Labels.service }}
          *Environment:* {{ .Labels.environment }}
          {{ end }}
        send_resolved: true
        
  # Database team notifications
  - name: 'database-team'
    webhook_configs:
      - url: 'http://devcontainer:8080/webhooks/database-alerts'
        send_resolved: true
        title: 'üóÑÔ∏è Database Alert: {{ .GroupLabels.alertname }}'
    email_configs:
      - to: 'database-team@ccprompts.dev'
        subject: 'Database Alert: {{ .GroupLabels.alertname }}'
        body: |
          Database alert in CCPrompts development environment:
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          Started: {{ .StartsAt }}
          {{ if .EndsAt }}Ended: {{ .EndsAt }}{{ end }}
          {{ end }}
          
  # Security team notifications
  - name: 'security-team'
    webhook_configs:
      - url: 'http://devcontainer:8080/webhooks/security-alerts'
        send_resolved: true
        title: 'üõ°Ô∏è Security Alert: {{ .GroupLabels.alertname }}'
    slack_configs:
      - api_url: '${SECURITY_SLACK_WEBHOOK_URL}'
        channel: '#security-alerts'
        title: 'üõ°Ô∏è Security Alert in CCPrompts'
        text: |
          {{ range .Alerts }}
          *Security Alert:* {{ .Annotations.summary }}
          *Description:* {{ .Annotations.description }}
          *Severity:* {{ .Labels.severity }}
          *Started:* {{ .StartsAt }}
          {{ end }}
        send_resolved: true
        
  # Development team notifications
  - name: 'dev-team'
    webhook_configs:
      - url: 'http://devcontainer:8080/webhooks/dev-alerts'
        send_resolved: true
        title: '‚öôÔ∏è Development Alert: {{ .GroupLabels.alertname }}'
    slack_configs:
      - api_url: '${DEV_SLACK_WEBHOOK_URL}'
        channel: '#dev-alerts'
        title: '‚öôÔ∏è Development Alert'
        text: |
          {{ range .Alerts }}
          *Alert:* {{ .Annotations.summary }}
          *Job:* {{ .Labels.job }}
          *Description:* {{ .Annotations.description }}
          {{ end }}
        send_resolved: true
        
  # Infrastructure team notifications
  - name: 'infrastructure-team'
    webhook_configs:
      - url: 'http://devcontainer:8080/webhooks/infra-alerts'
        send_resolved: true
        title: 'üèóÔ∏è Infrastructure Alert: {{ .GroupLabels.alertname }}'
    email_configs:
      - to: 'infrastructure@ccprompts.dev'
        subject: 'Infrastructure Alert: {{ .GroupLabels.alertname }}'
        body: |
          Infrastructure alert in CCPrompts:
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Instance: {{ .Labels.instance }}
          Description: {{ .Annotations.description }}
          {{ end }}
          
  # Network team notifications
  - name: 'network-team'
    webhook_configs:
      - url: 'http://devcontainer:8080/webhooks/network-alerts'
        send_resolved: true
        title: 'üåê Network Alert: {{ .GroupLabels.alertname }}'
        
  # Container team notifications
  - name: 'container-team'
    webhook_configs:
      - url: 'http://devcontainer:8080/webhooks/container-alerts'
        send_resolved: true
        title: 'üê≥ Container Alert: {{ .GroupLabels.alertname }}'

# Inhibition rules to suppress certain alerts when others are firing
inhibit_rules:
  # Suppress non-critical alerts when critical alerts are firing
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['alertname', 'instance']
    
  # Suppress individual service alerts when the whole system is down
  - source_match:
      alertname: 'ServiceDown'
    target_match_re:
      alertname: '.*(Down|Unavailable|Error).*'
    equal: ['instance']
    
  # Suppress container alerts when the host is down
  - source_match:
      alertname: 'HostDown'
    target_match_re:
      service: 'container'
    equal: ['instance']

# Templates for custom alert messages
templates:
  - '/etc/alertmanager/templates/*.tmpl'