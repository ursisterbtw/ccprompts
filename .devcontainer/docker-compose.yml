version: '3.8'

services:
  # Main development container
  devcontainer:
    build:
      context: .
      dockerfile: Dockerfile
      target: final
      args:
        USERNAME: vscode
        USER_UID: 1000
        USER_GID: 1000
    volumes:
      - ../:/workspace:cached
      - /var/run/docker.sock:/var/run/docker.sock
      - devcontainer-extensions:/home/vscode/.vscode-server/extensions
      - devcontainer-cargo:/home/vscode/.cargo
      - devcontainer-npm:/home/vscode/.npm
      - devcontainer-go:/home/vscode/go
    environment:
      - SHELL=/bin/zsh
      - TERM=xterm-256color
      - WORKSPACE=/workspace
      - DAGGER_CLOUD_TOKEN=${DAGGER_CLOUD_TOKEN}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
    network_mode: host
    privileged: true
    cap_add:
      - SYS_PTRACE
    security_opt:
      - seccomp:unconfined
    command: sleep infinity

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru

  # PostgreSQL for development database
  postgres:
    image: postgres:15-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: ccprompts_dev
      POSTGRES_USER: developer
      POSTGRES_PASSWORD: devpass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d

  # MinIO for object storage simulation
  minio:
    image: minio/minio:latest
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"

  # Elasticsearch for search functionality
  elasticsearch:
    image: elasticsearch:8.11.0
    restart: unless-stopped
    environment:
      - node.name=es01
      - cluster.name=ccprompts-cluster
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    restart: unless-stopped
    environment:
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"
      - "4318:4318"

  # NGINX for reverse proxy and load balancing
  nginx:
    image: nginx:alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - nginx-logs:/var/log/nginx
    depends_on:
      - devcontainer

  # SonarQube for code quality analysis
  sonarqube:
    image: sonarqube:community
    restart: unless-stopped
    environment:
      SONAR_ES_BOOTSTRAP_CHECKS_DISABLE: true
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonarqube
      SONAR_JDBC_USERNAME: developer
      SONAR_JDBC_PASSWORD: devpass
    ports:
      - "9001:9000"
    volumes:
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-extensions:/opt/sonarqube/extensions
      - sonarqube-logs:/opt/sonarqube/logs
    depends_on:
      - postgres

  # Vault for secrets management
  vault:
    image: vault:latest
    restart: unless-stopped
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: dev-root-token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    cap_add:
      - IPC_LOCK
    volumes:
      - vault-data:/vault/data
    command: vault server -dev

  # Adminer for database administration
  adminer:
    image: adminer:latest
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres

volumes:
  # Development container volumes
  devcontainer-extensions:
  devcontainer-cargo:
  devcontainer-npm:
  devcontainer-go:
  
  # Service data volumes
  redis-data:
  postgres-data:
  minio-data:
  elasticsearch-data:
  prometheus-data:
  grafana-data:
  nginx-logs:
  sonarqube-data:
  sonarqube-extensions:
  sonarqube-logs:
  vault-data:

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16