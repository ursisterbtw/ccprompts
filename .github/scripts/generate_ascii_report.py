#!/usr/bin/env python3

def generate_bar_chart(value, width):
    filled = min(width, int(round(value * width / 6.0)))

def generate_sparkline(data):
    # Convert data to a simple sparkline
    bars = '▁▂▃▄▅▆▇█'
    max_val = max(data) if data else 1
    min_val = min(data) if data else 0
    delta = max_val - min_val if max_val > min_val else 1
    
    sparkline = ''
    for val in data:
        index = int((val - min_val) / delta * (len(bars) - 1))
        sparkline += bars[min(index, len(bars) - 1)]
    return sparkline

def main():
    # Example data structure - in a real workflow, this would come from your workflow
    data = {
        'workflows': {
            'test': {'before': 5.5, 'after': 4.2, 'trend': '↓'},
            'build': {'before': 8.1, 'after': 6.7, 'trend': '↓'},
            'deploy': {'before': 3.2, 'after': 3.1, 'trend': '→'}
        },
        'baseline': [5.5, 4.8, 5.2, 4.9, 5.1],
        'current': [4.2, 4.0, 4.1, 4.0, 4.2]
    }

    report = """# 📊 Performance Report

### Performance Sparklines
**Before PR:** {before_sparkline} (avg: {before_avg:.1f}m)
**After PR:**  {after_sparkline} (avg: {after_avg:.1f}m)

### Workflow Performance Breakdown
```
┌─────────────┬──────────┬──────────┬───────┬─────────────────────────┐
│ Workflow    │ Before   │ After    │ Trend │ Performance             │
├─────────────┼──────────┼──────────┼───────┼─────────────────────────┤""".format(
        before_sparkline=generate_sparkline(data['baseline']),
        before_avg=sum(data['baseline'])/len(data['baseline']),
        after_sparkline=generate_sparkline(data['current']),
        after_avg=sum(data['current'])/len(data['current'])
    )

    for name, metrics in data['workflows'].items():
        change = ((metrics['before'] - metrics['after']) / metrics['before']) * 100
        bar = generate_bar_chart(metrics['after'], 6)
        report += f"\n│ {name:<11} │ {metrics['before']:>6.1f}m │ {metrics['after']:>6.1f}m │   {metrics['trend']}   │ {bar} │"

    report += """
└─────────────┴──────────┴──────────┴───────┴─────────────────────────┘
```

### Performance Score: ████████░░ 82/100

<details>
<summary>🔍 Detailed Metrics</summary>

#### Time Distribution
```
Setup       ▓▓░░░░░░░░  20%
Build       ▓▓▓▓▓▓░░░░  60%
Tests       ▓▓░░░░░░░░  20%
```

#### Optimization Suggestions
- 🎯 Consider caching dependencies (potential 30% improvement)
- 🔧 Parallelize test execution (potential 15% improvement)
- 📦 Use incremental builds (potential 20% improvement)

</details>

---
<sub>Generated by ASCII Performance Bot 🤖 | [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})</sub>"""

    print(report)

if __name__ == "__main__":
    main()
