---
    name: Deployment Pipeline
    on:
      push:
        branches:
          - main
        tags:
          - v*
      workflow_dispatch:
        inputs:
          environment:
            description: Target environment
            required: true
            default: staging
            type: choice
            options:
              - staging
              - production
          force_deploy:
            description: Force deployment (skip quality gates)
            required: false
            default: false
            type: boolean
    env:
      NODE_VERSION: "18"
      FORCE_COLOR: 1
      CI: true
    jobs:
      prepare:
        name: Prepare Deployment
        runs-on: ubuntu-latest
        outputs:
          deploy-environment: ${{ steps.determine-env.outputs.environment }}
          deploy-version: ${{ steps.determine-version.outputs.version }}
          should-deploy: ${{ steps.quality-gate.outputs.should-deploy }}
        steps:
          - name: Checkout repository
            uses: actions/checkout@v4
            with:
              fetch-depth: 0
          - name: Determine target environment
            id: determine-env
            env:
              EVENT_NAME: ${{ github.event_name }}
              INPUT_ENVIRONMENT: ${{ github.event.inputs.environment }}
              GITHUB_REF: ${{ github.ref }}
            run: |
              if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
                ENVIRONMENT="$INPUT_ENVIRONMENT"
              elif [[ "$GITHUB_REF" == refs/tags/v* ]]; then
                ENVIRONMENT="production"
              else
                ENVIRONMENT="staging"
              fi

              echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
              echo "🎯 Target environment: $ENVIRONMENT"
          - name: Determine version
            id: determine-version
            env:
              GITHUB_REF: ${{ github.ref }}
              GITHUB_REF_NAME: ${{ github.ref_name }}
            run: |
              if [[ "$GITHUB_REF" == refs/tags/v* ]]; then
                VERSION="$GITHUB_REF_NAME"
              else
                VERSION="v$(date +'%Y%m%d')-$(git rev-parse --short HEAD)"
              fi

              echo "version=$VERSION" >> $GITHUB_OUTPUT
              echo "📦 Deployment version: $VERSION"
          - name: Quality gate check
            id: quality-gate
            run: >
              SHOULD_DEPLOY="true"


              # Skip quality gates if force deployment is requested

              if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
                echo "⚠️ Force deployment requested - skipping quality gates"
                echo "should-deploy=true" >> $GITHUB_OUTPUT
                exit 0
              fi


              # For production deployments, require tagged releases

              if [ "${{ steps.determine-env.outputs.environment }}" = "production" ] && [[ ! "${{ github.ref }}" == refs/tags/v* ]]; then
                echo "❌ Production deployments require tagged releases"
                SHOULD_DEPLOY="false"
              fi


              echo "should-deploy=$SHOULD_DEPLOY" >> $GITHUB_OUTPUT

              echo "🚪 Quality gate result: $SHOULD_DEPLOY"
      quality-validation:
        name: Pre-Deployment Quality Validation
        runs-on: ubuntu-latest
        needs: prepare
        if: needs.prepare.outputs.should-deploy == 'true'
        steps:
          - name: Checkout repository
            uses: actions/checkout@v4
            with:
              fetch-depth: 0
          - name: Setup Node.js
            uses: actions/setup-node@v4
            with:
              node-version: ${{ env.NODE_VERSION }}
              cache: npm
          - name: Install dependencies
            run: |
              npm ci --prefer-offline --no-audit --progress=false
          - name: Run comprehensive validation
            run: >
              echo "🧪 Running pre-deployment validation..."


              # Run validation and capture exit code

              npm run validate 2>&1 | tee pre-deploy-validation.log

              VALIDATION_EXIT_CODE=${PIPESTATUS[0]}


              # Extract security issues

              SECURITY_ISSUES=$(grep "Security issues found:" pre-deploy-validation.log | grep -o '[0-9]\+' || echo "0")


              # Extract validation errors

              ERRORS=$(grep "Errors (" pre-deploy-validation.log | grep -o '([0-9]\+)' | grep -o '[0-9]\+' || echo "0")


              echo "📊 Pre-deployment validation results:"

              echo "  - Security issues: $SECURITY_ISSUES"

              echo "  - Validation errors: $ERRORS"


              # Strict validation for production

              if [ "${{ needs.prepare.outputs.deploy-environment }}" = "production" ]; then
                if [ "$SECURITY_ISSUES" -gt 0 ] || [ "$ERRORS" -gt 0 ]; then
                  echo "❌ Production deployment blocked - validation failed"
                  echo "::error::Production deployment requires zero security issues and validation errors"
                  exit 1
                fi
              else
                # More lenient for staging
                if [ "$SECURITY_ISSUES" -gt 2 ] || [ "$ERRORS" -gt 5 ]; then
                  echo "❌ Staging deployment blocked - too many issues"
                  echo "::error::Staging deployment threshold exceeded"
                  exit 1
                fi
              fi


              if [ $VALIDATION_EXIT_CODE -ne 0 ]; then
                echo "❌ Validation failed"
                exit $VALIDATION_EXIT_CODE
              fi


              echo "✅ Pre-deployment validation passed"
          - name: Security scan
            run: >
              echo "🛡️ Running security scan..."


              # Run dependency audit

              npm audit --audit-level=moderate --json > audit-results.json 2>/dev/null || true


              if [ -f "audit-results.json" ] && [ -s "audit-results.json" ]; then
                CRITICAL_VULNS=$(jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "critical") | .key' audit-results.json 2>/dev/null | wc -l || echo "0")
                HIGH_VULNS=$(jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "high") | .key' audit-results.json 2>/dev/null | wc -l || echo "0")

                echo "Critical vulnerabilities: $CRITICAL_VULNS"
                echo "High vulnerabilities: $HIGH_VULNS"

                # Block deployment on critical vulnerabilities
                if [ "$CRITICAL_VULNS" -gt 0 ]; then
                  echo "❌ Deployment blocked - critical vulnerabilities found"
                  echo "::error::Critical security vulnerabilities detected"
                  exit 1
                fi

                # Warn on high vulnerabilities
                if [ "$HIGH_VULNS" -gt 3 ]; then
                  echo "⚠️ High number of high-severity vulnerabilities: $HIGH_VULNS"
                  echo "::warning::Consider addressing high-severity vulnerabilities"
                fi
              fi


              echo "✅ Security scan completed"
          - name: Upload pre-deployment artifacts
            if: always()
            uses: actions/upload-artifact@v3
            with:
              name: pre-deployment-reports
              path: |
                pre-deploy-validation.log
                audit-results.json
              retention-days: 30
      deploy-staging:
        name: Deploy to Staging
        runs-on: ubuntu-latest
        needs:
          - prepare
          - quality-validation
        if: needs.prepare.outputs.deploy-environment == 'staging' &&
          needs.prepare.outputs.should-deploy == 'true'
        steps:
          - name: Checkout repository
            uses: actions/checkout@v4
            with:
              fetch-depth: 0
          - name: Setup Node.js
            uses: actions/setup-node@v4
            with:
              node-version: ${{ env.NODE_VERSION }}
              cache: npm
          - name: Install dependencies
            run: |
              npm ci --prefer-offline --no-audit --progress=false
          - name: Build deployment package
            run: |
              echo "📦 Building deployment package..."

              # Create deployment directory
              mkdir -p dist

              # Copy essential files
              cp -r prompts dist/
              cp -r .claude dist/
              cp -r assets dist/
              cp README.md dist/
              cp CLAUDE.md dist/
              cp CHANGELOG.md dist/
              cp LICENSE dist/
              cp package.json dist/

              # Create deployment metadata
              cat > dist/deployment-info.json << EOF
              {
                "version": "${{ needs.prepare.outputs.deploy-version }}",
                "environment": "staging",
                "deployedAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
                "gitCommit": "${{ github.sha }}",
                "gitBranch": "${{ github.ref_name }}",
                "buildNumber": "${{ github.run_number }}"
              }
              EOF

              echo "✅ Deployment package built"
          - name: Deploy to staging
            run: |
              echo "🚀 Deploying to staging environment..."

              # Simulate deployment process
              echo "  - Uploading files to staging server..."
              echo "  - Updating configuration..."
              echo "  - Running database migrations..."
              echo "  - Restarting services..."

              # In a real scenario, this would include:
              # - Uploading to cloud storage (S3, Azure Blob, etc.)
              # - Updating CDN configuration
              # - Running deployment scripts
              # - Health checks

              sleep 5
              echo "✅ Staging deployment completed successfully"
          - name: Staging health check
            run: |
              echo "🏥 Running staging health checks..."

              # Simulate health checks
              echo "  - Checking application availability..."
              echo "  - Validating API endpoints..."
              echo "  - Testing core functionality..."

              # In a real scenario, this would include:
              # - HTTP health check requests
              # - Database connectivity tests
              # - External service integration tests
              # - Performance smoke tests

              sleep 3
              echo "✅ Staging health checks passed"
          - name: Upload staging artifacts
            uses: actions/upload-artifact@v3
            with:
              name: staging-deployment-${{ needs.prepare.outputs.deploy-version }}
              path: dist/
              retention-days: 30
      deploy-production:
        name: Deploy to Production
        runs-on: ubuntu-latest
        needs:
          - prepare
          - quality-validation
        if: needs.prepare.outputs.deploy-environment == 'production' &&
          needs.prepare.outputs.should-deploy == 'true'
        steps:
          - name: Checkout repository
            uses: actions/checkout@v4
            with:
              fetch-depth: 0
          - name: Setup Node.js
            uses: actions/setup-node@v4
            with:
              node-version: ${{ env.NODE_VERSION }}
              cache: npm
          - name: Install dependencies
            run: |
              npm ci --prefer-offline --no-audit --progress=false
          - name: Final pre-production validation
            run: >
              echo "🔍 Final pre-production validation..."


              # Extra strict validation for production

              npm run validate 2>&1 | tee final-validation.log

              VALIDATION_EXIT_CODE=${PIPESTATUS[0]}


              # Zero tolerance for production

              SECURITY_ISSUES=$(grep "Security issues found:" final-validation.log | grep -o '[0-9]\+' || echo "0")

              ERRORS=$(grep "Errors (" final-validation.log | grep -o '([0-9]\+)' | grep -o '[0-9]\+' || echo "0")


              if [ "$SECURITY_ISSUES" -gt 0 ] || [ "$ERRORS" -gt 0 ] || [ $VALIDATION_EXIT_CODE -ne 0 ]; then
                echo "❌ Production deployment blocked - validation failed"
                echo "::error::Production requires perfect validation results"
                exit 1
              fi


              echo "✅ Final validation passed"
          - name: Create production backup
            run: |
              echo "💾 Creating production backup..."

              # Simulate backup creation
              BACKUP_ID="backup-$(date +'%Y%m%d-%H%M%S')-${{ github.sha }}"
              echo "  - Creating backup: $BACKUP_ID"
              echo "  - Backing up configuration..."
              echo "  - Backing up current deployment..."

              echo "BACKUP_ID=$BACKUP_ID" >> $GITHUB_ENV
              echo "✅ Production backup created: $BACKUP_ID"
          - name: Build production package
            run: |
              echo "📦 Building production deployment package..."

              # Create production directory
              mkdir -p prod-dist

              # Copy files with production optimizations
              cp -r prompts prod-dist/
              cp -r .claude prod-dist/
              cp -r assets prod-dist/
              cp README.md prod-dist/
              cp CLAUDE.md prod-dist/
              cp CHANGELOG.md prod-dist/
              cp LICENSE prod-dist/
              cp package.json prod-dist/

              # Create production deployment metadata
              cat > prod-dist/deployment-info.json << EOF
              {
                "version": "${{ needs.prepare.outputs.deploy-version }}",
                "environment": "production",
                "deployedAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
                "gitCommit": "${{ github.sha }}",
                "gitTag": "${{ github.ref_name }}",
                "buildNumber": "${{ github.run_number }}",
                "backupId": "${{ env.BACKUP_ID }}"
              }
              EOF

              echo "✅ Production package built"
          - name: Deploy to production
            run: |
              echo "🚀 Deploying to production environment..."

              # Blue-green deployment simulation
              echo "  - Creating new deployment slot..."
              echo "  - Uploading production package..."
              echo "  - Running production migrations..."
              echo "  - Warming up new deployment..."
              echo "  - Running pre-switch health checks..."
              echo "  - Switching traffic to new deployment..."
              echo "  - Running post-switch validation..."

              sleep 10
              echo "✅ Production deployment completed successfully"
          - name: Production health check
            run: |
              echo "🏥 Running comprehensive production health checks..."

              # Extensive health checks for production
              echo "  - Application availability check..."
              echo "  - Core functionality validation..."
              echo "  - Performance baseline verification..."
              echo "  - External integrations test..."
              echo "  - Load balancer health check..."
              echo "  - CDN cache validation..."

              sleep 5
              echo "✅ All production health checks passed"
          - name: Create deployment record
            run: >
              echo "📝 Creating deployment record..."


              cat > deployment-record.json << EOF

              {
                "deploymentId": "${{ github.run_id }}",
                "version": "${{ needs.prepare.outputs.deploy-version }}",
                "environment": "production",
                "status": "success",
                "deployedAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
                "deployedBy": "${{ github.actor }}",
                "gitCommit": "${{ github.sha }}",
                "gitTag": "${{ github.ref_name }}",
                "backupId": "${{ env.BACKUP_ID }}",
                "buildUrl": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              }

              EOF


              echo "✅ Deployment record created"
          - name: Upload production artifacts
            uses: actions/upload-artifact@v3
            with:
              name: production-deployment-${{ needs.prepare.outputs.deploy-version }}
              path: |
                prod-dist/
                deployment-record.json
              retention-days: 90
      post-deployment:
        name: Post-Deployment Tasks
        runs-on: ubuntu-latest
        needs:
          - prepare
          - deploy-staging
          - deploy-production
        if: always() && (needs.deploy-staging.result == 'success' ||
          needs.deploy-production.result == 'success')
        steps:
          - name: Checkout repository
            uses: actions/checkout@v4
          - name: Determine deployment result
            run: >
              STAGING_RESULT="${{ needs.deploy-staging.result }}"

              PRODUCTION_RESULT="${{ needs.deploy-production.result }}"

              ENVIRONMENT="${{ needs.prepare.outputs.deploy-environment }}"


              if [ "$ENVIRONMENT" = "staging" ] && [ "$STAGING_RESULT" = "success" ]; then
                echo "DEPLOYMENT_SUCCESS=true" >> $GITHUB_ENV
              elif [ "$ENVIRONMENT" = "production" ] && [ "$PRODUCTION_RESULT" = "success" ]; then
                echo "DEPLOYMENT_SUCCESS=true" >> $GITHUB_ENV
              else
                echo "DEPLOYMENT_SUCCESS=false" >> $GITHUB_ENV
              fi


              echo "Environment: $ENVIRONMENT"

              echo "Deployment success: ${{ env.DEPLOYMENT_SUCCESS }}"
          - name: Update deployment status
            if: env.DEPLOYMENT_SUCCESS == 'true'
            run: |
              echo "📊 Updating deployment status..."

              # In a real scenario, this would update:
              # - Deployment dashboard
              # - Monitoring systems
              # - Status pages
              # - Team notifications

              echo "✅ Deployment status updated"
          - name: Generate deployment summary
            if: always()
            run: >
              cat << 'EOF' >> $GITHUB_STEP_SUMMARY

              ## 🚀 Deployment Summary


              ### 📋 Deployment Details

              - **Environment**: ${{ needs.prepare.outputs.deploy-environment }}

              - **Version**: ${{ needs.prepare.outputs.deploy-version }}

              - **Status**: ${{ env.DEPLOYMENT_SUCCESS == 'true' && '✅ Success' || '❌ Failed' }}

              - **Deployed At**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

              - **Deployed By**: ${{ github.actor }}


              ### 🔗 Deployment Links

              ${{ needs.prepare.outputs.deploy-environment == 'staging' && '- **Staging URL**: https://staging.ccprompts.dev' || '' }}

              ${{ needs.prepare.outputs.deploy-environment == 'production' && '- **Production URL**: https://ccprompts.dev' || '' }}

              - **Build URL**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}


              ### 📊 Quality Metrics

              - **Pre-deployment Validation**: ${{ needs.quality-validation.result }}

              - **Security Scan**: Passed

              - **Health Checks**: ${{ env.DEPLOYMENT_SUCCESS == 'true' && 'Passed' || 'Failed' }}


              ---


              ${{ env.DEPLOYMENT_SUCCESS == 'true' && '🎉 **Deployment Successful!**' || '💥 **Deployment Failed**' }}

              EOF
      rollback:
        name: Emergency Rollback
        runs-on: ubuntu-latest
        if: failure() && (github.event_name == 'workflow_dispatch' ||
          contains(github.event.head_commit.message, '[rollback]'))
        environment: ${{ needs.prepare.outputs.deploy-environment || 'production' }}
        permissions:
          contents: read
          issues: write
        steps:
          - name: Checkout repository
            uses: actions/checkout@v4
          - name: Execute rollback
            run: >
              echo "🚨 Executing emergency rollback..."


              # Rollback simulation

              echo "  - Identifying previous stable version..."

              echo "  - Restoring from backup..."

              echo "  - Switching traffic back..."

              echo "  - Validating rollback..."


              sleep 5

              echo "✅ Rollback completed successfully"

              echo "::warning::Emergency rollback executed - investigate deployment issues"
          - name: Notify team of rollback
            run: >
              echo "📢 Notifying team of rollback..."

              echo "::error::Deployment failed and rollback was executed"


              cat << 'EOF' >> $GITHUB_STEP_SUMMARY

              ## 🚨 Emergency Rollback Executed


              A deployment failure triggered an emergency rollback.


              **Action Required**:

              - Investigate the deployment failure

              - Fix the issues identified

              - Re-run deployment when ready


              **Rollback Details**:

              - Environment: ${{ needs.prepare.outputs.deploy-environment || 'Unknown' }}

              - Rollback Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")

              - Build: ${{ github.run_id }}

              EOF
