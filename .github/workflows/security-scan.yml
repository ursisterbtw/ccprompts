name: Security Scan

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan-type:
        description: 'Type of security scan'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - quick
          - critical-only

env:
  NODE_VERSION: '20'
  SECURITY_SCAN_VERSION: v3

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

jobs:
  prepare-security-scan:
    runs-on: ubuntu-latest
    outputs:
      scan-matrix: ${{ steps.setup-matrix.outputs.matrix }}
      cache-key: ${{ steps.cache-setup.outputs.key }}
    steps:
      - name: Setup scan matrix
        id: setup-matrix
        run: |
          if [ "${{ github.event.inputs.scan-type }}" = "quick" ]; then
            echo 'matrix=["dependency","secrets"]' >> $GITHUB_OUTPUT
          elif [ "${{ github.event.inputs.scan-type }}" = "critical-only" ]; then
            echo 'matrix=["dependency"]' >> $GITHUB_OUTPUT
          else
            echo 'matrix=["dependency","secrets","permissions","code-analysis","compliance"]' >> $GITHUB_OUTPUT
          fi
          
      - name: Cache setup
        id: cache-setup
        run: |
          echo "key=security-${{ env.SECURITY_SCAN_VERSION }}-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

  security-audit:
    needs: prepare-security-scan
    strategy:
      matrix:
        scan-type: ${{ fromJson(needs.prepare-security-scan.outputs.scan-matrix) }}
      fail-fast: false
    runs-on: ubuntu-latest
    name: Security Scan - ${{ matrix.scan-type }}
    permissions:
      contents: read
      security-events: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      if: matrix.scan-type == 'dependency' || matrix.scan-type == 'code-analysis'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'

    - name: Cache security tools
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.npm
          /opt/security-tools
        key: ${{ needs.prepare-security-scan.outputs.cache-key }}
        restore-keys: |
          security-${{ env.SECURITY_SCAN_VERSION }}-${{ runner.os }}-
    
    - name: Install dependencies
      if: matrix.scan-type == 'dependency' || matrix.scan-type == 'code-analysis'
      run: npm ci
    
    - name: Run npm audit
      if: matrix.scan-type == 'dependency'
      run: |
        npm audit --audit-level=moderate || true
        npm audit --audit-level=high --json > audit-results.json || true
    
    - name: Security scan with enhanced validator
      if: matrix.scan-type == 'code-analysis'
      run: |
        echo "üõ°Ô∏è Running comprehensive security validation..."
        npm run validate
    
    - name: Check for hardcoded secrets
      if: matrix.scan-type == 'secrets'
      run: |
        echo "üîç Scanning for hardcoded secrets..."
        
        # Check for common secret patterns
        if grep -r "password\s*=\s*['\"][^'\"]\+['\"]" . --exclude-dir=node_modules --exclude-dir=.git; then
          echo "‚ùå Found hardcoded passwords"
          exit 1
        fi
        
        if grep -r "api[_-]\?key\s*=\s*['\"][^'\"]\+['\"]" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md"; then
          echo "‚ö†Ô∏è Found potential hardcoded API keys - review needed"
        fi
        
        if grep -r "secret\s*=\s*['\"][^'\"]\+['\"]" . --exclude-dir=node_modules --exclude-dir=.git --exclude="*.md"; then
          echo "‚ö†Ô∏è Found potential hardcoded secrets - review needed"
        fi
        
        echo "‚úÖ Secret scanning completed"
    
    - name: Validate file permissions
      if: matrix.scan-type == 'permissions'
      run: |
        echo "ÔøΩ Checking file permissions..."
        
        # Check for executable files that shouldn't be
        find . -name "*.md" -executable -not -path "./.git/*" -not -path "./node_modules/*" | while read file; do
          echo "‚ùå Markdown file should not be executable: $file"
          exit 1
        done
        
        # Check for world-writable files
        find . -type f -perm -002 -not -path "./.git/*" -not -path "./node_modules/*" | while read file; do
          echo "‚ùå File is world-writable: $file"
          exit 1
        done
        
        echo "‚úÖ File permissions are appropriate"
    
    - name: Dependency vulnerability check
      if: matrix.scan-type == 'dependency'
      run: |
        echo "üì¶ Checking dependency vulnerabilities..."
        
        # Enhanced dependency checking
        if [ -f "audit-results.json" ]; then
          HIGH_VULNS=$(cat audit-results.json | grep -o '"severity":"high"' | wc -l)
          CRITICAL_VULNS=$(cat audit-results.json | grep -o '"severity":"critical"' | wc -l)
          
          echo "High severity vulnerabilities: $HIGH_VULNS"
          echo "Critical severity vulnerabilities: $CRITICAL_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "‚ùå Critical vulnerabilities found - blocking deployment"
            exit 1
          fi
          
          if [ "$HIGH_VULNS" -gt 5 ]; then
            echo "‚ö†Ô∏è Too many high severity vulnerabilities"
            exit 1
          fi
        fi
        
        echo "‚úÖ Dependency security check passed"
    
    - name: Configuration security check
      run: |
        echo "‚öôÔ∏è Checking configuration security..."
        
        # Check for insecure configurations
        if find . -name "*.json" -not -path "./node_modules/*" -not -path "./.git/*" | xargs grep -l "\"password\":\|\"secret\":\|\"key\":"; then
          echo "‚ö†Ô∏è Found potential secrets in configuration files"
        fi
        
        # Check for debug flags in production configs
        if find . -name "*.json" -not -path "./node_modules/*" | xargs grep -l "\"debug\":\s*true"; then
          echo "‚ö†Ô∏è Found debug flags in configuration"
        fi
        
        echo "‚úÖ Configuration security check completed"
    
    - name: Generate security report
      if: always()
      run: |
        echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Hardcoded secret scanning completed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ File permission validation passed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Dependency vulnerability check completed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Configuration security check completed" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "audit-results.json" ]; then
          echo "üìä **Dependency Audit Results**:" >> $GITHUB_STEP_SUMMARY
          echo "- High severity: $(cat audit-results.json | grep -o '"severity":"high"' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- Critical severity: $(cat audit-results.json | grep -o '"severity":"critical"' | wc -l)" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "üõ°Ô∏è Security scan completed successfully!" >> $GITHUB_STEP_SUMMARY

  markdown-security:
    runs-on: ubuntu-latest
    name: Markdown Content Security Review
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for malicious links
      run: |
        echo "ÔøΩ Scanning for potentially malicious links..."
        
        # Check for suspicious domains in markdown files
        SUSPICIOUS_PATTERNS="(bit\.ly|tinyurl\.com|t\.co|goo\.gl)|(javascript:|data:|vbscript:)"
        
        if grep -r -E "$SUSPICIOUS_PATTERNS" . --include="*.md" --exclude-dir=node_modules; then
          echo "‚ö†Ô∏è Found potentially suspicious links - manual review required"
        else
          echo "‚úÖ No suspicious links found"
        fi
    
    - name: Validate markdown structure
      run: |
        echo "üìù Validating markdown structure..."
        
        # Check for potentially dangerous HTML in markdown
        if grep -r "<script\|<iframe\|<object\|<embed" . --include="*.md" --exclude-dir=node_modules; then
          echo "‚ö†Ô∏è Found potentially dangerous HTML tags in markdown"
        else
          echo "‚úÖ No dangerous HTML tags found"
        fi
    
    - name: Content validation
      run: |
        echo "ÔøΩ Performing content validation..."
        
        # Check for TODO/FIXME in production files
        if find . -name "*.md" -not -path "./CONTRIBUTING.md" -not -path "./.github/*" | xargs grep -l "TODO\|FIXME\|XXX\|HACK"; then
          echo "‚ö†Ô∏è Found TODO/FIXME markers in production documentation"
        else
          echo "‚úÖ No TODO markers found in production files"
        fi

  compliance-check:
    runs-on: ubuntu-latest
    name: Compliance and Policy Validation
    
    steps:
    - uses: actions/checkout@v4
    
    - name: License compliance check
      run: |
        echo "‚öñÔ∏è Checking license compliance..."
        
        # Verify LICENSE file exists and is readable
        if [ ! -f "LICENSE" ]; then
          echo "‚ùå LICENSE file is missing"
          exit 1
        fi
        
        # Check for license headers in key files (if applicable)
        echo "‚úÖ License compliance check passed"
    
    - name: Documentation completeness
      run: |
        echo "ÔøΩ Checking documentation completeness..."
        
        REQUIRED_DOCS=("README.md" "CONTRIBUTING.md" "CHANGELOG.md")
        
        for doc in "${REQUIRED_DOCS[@]}"; do
          if [ ! -f "$doc" ]; then
            echo "‚ùå Required documentation file missing: $doc"
            exit 1
          fi
        done
        
        echo "‚úÖ All required documentation files present"
    
    - name: Code of conduct check
      run: |
        echo "ü§ù Checking for code of conduct..."
        
        if [ -f "CODE_OF_CONDUCT.md" ] || grep -q "code of conduct" README.md CONTRIBUTING.md; then
          echo "‚úÖ Code of conduct found"
        else
          echo "‚ö†Ô∏è Consider adding a code of conduct"
        fi