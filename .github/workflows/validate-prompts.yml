name: Validate Prompts and Commands

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'prompts/**/*.md'
      - '.claude/commands/**/*.md'
      - '.claude/workflows/**/*.yaml'
      - '.claude/config.json'
      - '.claude/mcp.json'

env:
  NODE_VERSION: '20'
  VALIDATION_CACHE_VERSION: v2

permissions:
  contents: read
  pull-requests: write
  issues: write

concurrency:
  group: validate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  prepare-validation:
    runs-on: ubuntu-latest
    outputs:
      validation-matrix: ${{ steps.setup-matrix.outputs.matrix }}
      cache-key: ${{ steps.cache-setup.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          
      - name: Setup validation matrix
        id: setup-matrix
        run: |
          echo 'matrix=["markdown","commands","config","security"]' >> $GITHUB_OUTPUT
          
      - name: Cache setup
        id: cache-setup
        run: |
          echo "key=validation-${{ env.VALIDATION_CACHE_VERSION }}-${{ runner.os }}-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT
  validate-content:
    needs: prepare-validation
    strategy:
      matrix:
        validation-type: ${{ fromJson(needs.prepare-validation.outputs.validation-matrix) }}
      fail-fast: false
    runs-on: ubuntu-latest
    name: Validate ${{ matrix.validation-type }}
    permissions:
      contents: read
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1
    
    - name: Setup Node.js
      if: matrix.validation-type != 'security'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
        
    - name: Cache validation tools
      uses: actions/cache@v4
      with:
        path: |
          ~/.npm
          ~/.cache/markdownlint
          /tmp/validation-cache
        key: ${{ needs.prepare-validation.outputs.cache-key }}
        restore-keys: |
          validation-${{ env.VALIDATION_CACHE_VERSION }}-${{ runner.os }}-
    
    - name: Install dependencies
      if: matrix.validation-type == 'markdown'
      run: |
        npm install -g markdownlint-cli
        npm install -g markdown-link-check
        
    - name: Lint markdown files
      if: matrix.validation-type == 'markdown'
      run: |
        markdownlint prompts/**/*.md .claude/commands/**/*.md README.md CLAUDE.md CC-SDK-Guide.md
        
    - name: Check markdown links
      if: matrix.validation-type == 'markdown'
      run: |
        find . -name "*.md" -not -path "./node_modules/*" | xargs markdown-link-check --config .github/markdown-link-check.json
        
    - name: Validate prompt structure
      if: matrix.validation-type == 'markdown'
      run: |
        # Check for required XML sections in prompts
        for file in prompts/**/*.md; do
          if ! grep -q "<role>" "$file" || ! grep -q "<instructions>" "$file"; then
            echo "❌ $file missing required XML structure"
            exit 1
          fi
        done
        echo "✅ All prompts have valid XML structure"

    - name: Validate command completeness
      if: matrix.validation-type == 'commands'
      run: |
        # Check that all commands have proper headers and descriptions
        for file in .claude/commands/*.md; do
          if ! grep -q "^# " "$file" || ! grep -q "## Description" "$file"; then
            echo "❌ $file missing required sections"
            exit 1
          fi
        done
        echo "✅ All commands have valid structure"
        
    - name: Count commands
      if: matrix.validation-type == 'commands'
      run: |
        command_count=$(ls -1 .claude/commands/*.md | wc -l)
        echo "Found $command_count commands"
        if [ "$command_count" -ne 38 ]; then
          echo "❌ Expected 38 commands, found $command_count"
          exit 1
        fi
        echo "✅ Command count matches documentation"

    - name: Validate JSON configuration
      if: matrix.validation-type == 'config'
      run: |
        # Validate JSON syntax
        node -e "JSON.parse(require('fs').readFileSync('.claude/config.json', 'utf8'))"
        node -e "JSON.parse(require('fs').readFileSync('.claude/mcp.json', 'utf8'))"
        echo "✅ Configuration files are valid JSON"
        
    - name: Test MCP configuration
      if: matrix.validation-type == 'config'
      run: |
        cd .claude
        node test-mcp.js
        
    - name: Check for secrets
      if: matrix.validation-type == 'security'
      run: |
        # Basic secret scanning
        if grep -r "GITHUB_TOKEN=" . --exclude-dir=.git --exclude="*.example" --exclude-dir=node_modules; then
          echo "❌ Found hardcoded secrets"
          exit 1
        fi
        
        if grep -r "password\|secret\|key" . --exclude-dir=.git --exclude="*.md" --exclude="*.example" --exclude-dir=node_modules -i; then
          echo "⚠️ Found potential secrets - manual review needed"
        fi
        
        echo "✅ No obvious secrets found"
        
    - name: Validate file permissions
      if: matrix.validation-type == 'security'
      run: |
        # Check for executable files that shouldn't be
        find . -name "*.md" -executable -not -path "./.git/*" | while read file; do
          echo "❌ Markdown file should not be executable: $file"
          exit 1
        done
        echo "✅ File permissions are appropriate"

  quality-gates:
    runs-on: ubuntu-latest
    name: Quality Gates
    needs: [validate-content]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate quality report
      run: |
        echo "## Quality Report" >> $GITHUB_STEP_SUMMARY
        echo "✅ Markdown validation passed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Command validation passed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Configuration validation passed" >> $GITHUB_STEP_SUMMARY
        echo "✅ Security scan passed" >> $GITHUB_STEP_SUMMARY
        echo "🚀 Ready for public release!" >> $GITHUB_STEP_SUMMARY