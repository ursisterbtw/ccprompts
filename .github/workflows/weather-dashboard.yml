name: Weather Build Health Dashboard

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 * * * *'  # Hourly weather updates
  workflow_dispatch:

permissions:
  contents: write
  actions: read
  pages: write
  id-token: write

jobs:
  generate-weather-dashboard:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Create weather dashboard
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat > weather-dashboard.js << 'EOF'
          const fs = require('fs');

          // Fetch CI/CD metrics and convert to weather
          function calculateWeather(metrics) {
            const weather = {
              condition: 'sunny',
              temperature: 25,
              humidity: 50,
              windSpeed: 10,
              pressure: 1013,
              visibility: 10,
              forecast: [],
              alerts: []
            };

            // Determine weather condition based on build health
            if (metrics.failureRate > 30) {
              weather.condition = 'stormy';
              weather.alerts.push('‚õàÔ∏è Severe build failures detected!');
            } else if (metrics.failureRate > 20) {
              weather.condition = 'rainy';
              weather.alerts.push('üåßÔ∏è Multiple build failures');
            } else if (metrics.failureRate > 10) {
              weather.condition = 'cloudy';
            } else if (metrics.failureRate > 5) {
              weather.condition = 'partly-cloudy';
            } else {
              weather.condition = 'sunny';
            }

            // Temperature = build speed (cold = slow, hot = fast)
            weather.temperature = Math.round(30 - (metrics.avgBuildTime * 2));
            
            // Humidity = test flakiness
            weather.humidity = Math.round(metrics.flakyTests * 10);
            
            // Wind speed = deployment velocity
            weather.windSpeed = Math.round(metrics.deploymentsPerDay * 5);
            
            // Pressure = queue pressure
            weather.pressure = Math.round(1013 - (metrics.queueSize * 10));
            
            // Visibility = code coverage
            weather.visibility = Math.round(metrics.codeCoverage / 10);

            return weather;
          }

          // Sample metrics (in production, fetch from API)
          const metrics = {
            failureRate: 5,
            avgBuildTime: 2.3,
            flakyTests: 3,
            deploymentsPerDay: 8,
            queueSize: 2,
            codeCoverage: 87
          };

          const weather = calculateWeather(metrics);

          // Weather icons
          const weatherIcons = {
            'sunny': '‚òÄÔ∏è',
            'partly-cloudy': '‚õÖ',
            'cloudy': '‚òÅÔ∏è',
            'rainy': 'üåßÔ∏è',
            'stormy': '‚õàÔ∏è',
            'snowy': '‚ùÑÔ∏è'
          };

          // Generate HTML dashboard
          const html = `<!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>CI/CD Weather Station</title>
            <style>
              body {
                margin: 0;
                padding: 0;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
                background: linear-gradient(to bottom, #87CEEB 0%, #E0E5EE 100%);
                min-height: 100vh;
                display: flex;
                align-items: center;
                justify-content: center;
              }
              
              .weather-app {
                background: rgba(255, 255, 255, 0.95);
                border-radius: 20px;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
                padding: 40px;
                max-width: 800px;
                width: 90%;
              }
              
              .header {
                text-align: center;
                margin-bottom: 40px;
              }
              
              .location {
                font-size: 24px;
                color: #333;
                margin-bottom: 10px;
              }
              
              .date-time {
                color: #666;
                font-size: 14px;
              }
              
              .current-weather {
                display: flex;
                align-items: center;
                justify-content: center;
                margin-bottom: 40px;
              }
              
              .weather-icon {
                font-size: 120px;
                margin-right: 40px;
                filter: drop-shadow(0 4px 6px rgba(0, 0, 0, 0.1));
                animation: float 3s ease-in-out infinite;
              }
              
              @keyframes float {
                0%, 100% { transform: translateY(0); }
                50% { transform: translateY(-10px); }
              }
              
              .temperature {
                font-size: 72px;
                font-weight: 300;
                color: #333;
              }
              
              .condition {
                font-size: 24px;
                color: #666;
                text-transform: capitalize;
                margin-top: 10px;
              }
              
              .metrics-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
                gap: 20px;
                margin-bottom: 40px;
              }
              
              .metric {
                background: rgba(255, 255, 255, 0.7);
                border-radius: 15px;
                padding: 20px;
                text-align: center;
                transition: transform 0.2s;
              }
              
              .metric:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
              }
              
              .metric-icon {
                font-size: 32px;
                margin-bottom: 10px;
              }
              
              .metric-value {
                font-size: 24px;
                font-weight: bold;
                color: #333;
                margin-bottom: 5px;
              }
              
              .metric-label {
                font-size: 12px;
                color: #666;
                text-transform: uppercase;
              }
              
              .forecast {
                display: flex;
                justify-content: space-between;
                margin-bottom: 30px;
                overflow-x: auto;
                padding: 10px 0;
              }
              
              .forecast-item {
                background: rgba(255, 255, 255, 0.5);
                border-radius: 10px;
                padding: 15px;
                text-align: center;
                min-width: 100px;
                margin: 0 5px;
              }
              
              .forecast-day {
                font-size: 14px;
                color: #666;
                margin-bottom: 10px;
              }
              
              .forecast-icon {
                font-size: 32px;
                margin-bottom: 10px;
              }
              
              .forecast-temp {
                font-size: 16px;
                color: #333;
              }
              
              .alerts {
                background: #fee;
                border-left: 4px solid #f66;
                border-radius: 8px;
                padding: 15px;
                margin-bottom: 20px;
              }
              
              .alert-title {
                font-weight: bold;
                color: #c00;
                margin-bottom: 5px;
              }
              
              .weather-map {
                background: linear-gradient(45deg, #4facfe 0%, #00f2fe 100%);
                border-radius: 15px;
                height: 200px;
                position: relative;
                overflow: hidden;
                margin-bottom: 30px;
              }
              
              .cloud {
                position: absolute;
                background: white;
                border-radius: 100px;
                opacity: 0.8;
                animation: drift 20s infinite;
              }
              
              .cloud::before,
              .cloud::after {
                content: '';
                position: absolute;
                background: white;
                border-radius: 100px;
              }
              
              .cloud1 {
                width: 100px;
                height: 40px;
                top: 20%;
                left: -100px;
              }
              
              .cloud1::before {
                width: 50px;
                height: 50px;
                top: -25px;
                left: 10px;
              }
              
              .cloud1::after {
                width: 60px;
                height: 40px;
                top: -15px;
                right: 10px;
              }
              
              @keyframes drift {
                from { transform: translateX(0); }
                to { transform: translateX(calc(100vw + 100px)); }
              }
              
              .insights {
                background: rgba(255, 255, 255, 0.7);
                border-radius: 15px;
                padding: 20px;
              }
              
              .insight-title {
                font-size: 18px;
                font-weight: bold;
                margin-bottom: 15px;
                color: #333;
              }
              
              .insight-item {
                display: flex;
                align-items: center;
                margin-bottom: 10px;
              }
              
              .insight-icon {
                font-size: 20px;
                margin-right: 10px;
              }
              
              .sunny { color: #FFD700; }
              .cloudy { color: #A0A0A0; }
              .rainy { color: #4169E1; }
              .stormy { color: #483D8B; }
            </style>
          </head>
          <body>
            <div class="weather-app">
              <div class="header">
                <h1 class="location">üè≠ CI/CD Weather Station</h1>
                <p class="date-time">${new Date().toLocaleString()}</p>
              </div>
              
              ${weather.alerts.length > 0 ? `
              <div class="alerts">
                <div class="alert-title">‚ö†Ô∏è Weather Alerts</div>
                ${weather.alerts.map(alert => `<div>${alert}</div>`).join('')}
              </div>
              ` : ''}
              
              <div class="current-weather">
                <div class="weather-icon">${weatherIcons[weather.condition]}</div>
                <div>
                  <div class="temperature">${weather.temperature}¬∞C</div>
                  <div class="condition">Build Weather: ${weather.condition.replace('-', ' ')}</div>
                </div>
              </div>
              
              <div class="metrics-grid">
                <div class="metric">
                  <div class="metric-icon">üå°Ô∏è</div>
                  <div class="metric-value">${weather.temperature}¬∞C</div>
                  <div class="metric-label">Build Speed</div>
                </div>
                <div class="metric">
                  <div class="metric-icon">üíß</div>
                  <div class="metric-value">${weather.humidity}%</div>
                  <div class="metric-label">Test Flakiness</div>
                </div>
                <div class="metric">
                  <div class="metric-icon">üí®</div>
                  <div class="metric-value">${weather.windSpeed} km/h</div>
                  <div class="metric-label">Deploy Velocity</div>
                </div>
                <div class="metric">
                  <div class="metric-icon">üåä</div>
                  <div class="metric-value">${weather.pressure} hPa</div>
                  <div class="metric-label">Queue Pressure</div>
                </div>
                <div class="metric">
                  <div class="metric-icon">üëÅÔ∏è</div>
                  <div class="metric-value">${weather.visibility} km</div>
                  <div class="metric-label">Code Coverage</div>
                </div>
              </div>
              
              <div class="weather-map">
                <div class="cloud cloud1"></div>
                <div class="cloud cloud1" style="animation-delay: 5s;"></div>
                <div class="cloud cloud1" style="animation-delay: 10s;"></div>
              </div>
              
              <div class="forecast">
                <div class="forecast-item">
                  <div class="forecast-day">Mon</div>
                  <div class="forecast-icon">‚òÄÔ∏è</div>
                  <div class="forecast-temp">28¬∞C</div>
                </div>
                <div class="forecast-item">
                  <div class="forecast-day">Tue</div>
                  <div class="forecast-icon">‚õÖ</div>
                  <div class="forecast-temp">26¬∞C</div>
                </div>
                <div class="forecast-item">
                  <div class="forecast-day">Wed</div>
                  <div class="forecast-icon">‚òÅÔ∏è</div>
                  <div class="forecast-temp">24¬∞C</div>
                </div>
                <div class="forecast-item">
                  <div class="forecast-day">Thu</div>
                  <div class="forecast-icon">üåßÔ∏è</div>
                  <div class="forecast-temp">22¬∞C</div>
                </div>
                <div class="forecast-item">
                  <div class="forecast-day">Fri</div>
                  <div class="forecast-icon">‚õÖ</div>
                  <div class="forecast-temp">25¬∞C</div>
                </div>
              </div>
              
              <div class="insights">
                <div class="insight-title">üåà Weather Insights</div>
                <div class="insight-item">
                  <span class="insight-icon">‚òÄÔ∏è</span>
                  <span>Build performance is excellent! Keep up the good work.</span>
                </div>
                <div class="insight-item">
                  <span class="insight-icon">üí®</span>
                  <span>High deployment velocity detected - ${weather.windSpeed} km/h</span>
                </div>
                <div class="insight-item">
                  <span class="insight-icon">üå°Ô∏è</span>
                  <span>Temperature indicates ${weather.temperature > 25 ? 'fast' : weather.temperature > 15 ? 'moderate' : 'slow'} build speeds</span>
                </div>
                ${weather.humidity > 50 ? `
                <div class="insight-item">
                  <span class="insight-icon">üíß</span>
                  <span>High test flakiness (${weather.humidity}%) - consider stabilizing tests</span>
                </div>
                ` : ''}
              </div>
            </div>
            
            <script>
              // Auto-refresh every 30 seconds
              setTimeout(() => location.reload(), 30000);
              
              // Add interactive weather effects
              document.addEventListener('DOMContentLoaded', () => {
                const weatherIcon = document.querySelector('.weather-icon');
                weatherIcon.addEventListener('click', () => {
                  weatherIcon.style.transform = 'scale(1.2) rotate(360deg)';
                  setTimeout(() => {
                    weatherIcon.style.transform = 'scale(1) rotate(0deg)';
                  }, 500);
                });
              });
            </script>
          </body>
          </html>`;

          fs.writeFileSync('weather-dashboard.html', html);
          console.log('‚òÄÔ∏è Weather dashboard generated!');

          // Also generate a simple JSON API
          const api = {
            timestamp: new Date().toISOString(),
            weather: weather,
            metrics: metrics,
            recommendation: weather.condition === 'sunny' ? 
              'Perfect conditions for deployment!' : 
              'Consider waiting for better conditions'
          };

          fs.writeFileSync('weather-api.json', JSON.stringify(api, null, 2));
          EOF

          node weather-dashboard.js

      - name: Upload weather dashboard
        uses: actions/upload-artifact@v4
        with:
          name: weather-dashboard-${{ github.run_id }}
          path: |
            weather-dashboard.html
            weather-api.json
          retention-days: 7