name: Test CI/CD Pipeline (v2)

on:
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      run_full_suite:
        description: 'Run full test suite'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20'

jobs:
  # Test validation pipeline using reusable workflow
  test-validation:
    name: Test Validation Pipeline
    uses: ./.github/workflows/reusable/validate-prompts.yml
    with:
      validation-script: 'scripts/validate-prompts.js'
      max-errors: 10  # More lenient for testing

  # Test security scanning using reusable workflow
  test-security:
    name: Test Security Scanning
    uses: ./.github/workflows/reusable/security-scan.yml
    with:
      enable-dependency-scan: true
      enable-secret-scan: true
      enable-file-permission-check: true

  # Test deployment preparation
  test-deployment:
    name: Test Deployment Preparation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    needs: [test-validation, test-security]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Cache npm dependencies
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-test-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-test-
            ${{ runner.os }}-npm-

      - name: Install dependencies
        if: steps.npm-cache.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Create deployment package
        run: |
          echo "📦 Creating deployment package..."
          
          mkdir -p deployment-package
          
          # Copy necessary files
          cp -r prompts deployment-package/
          cp -r .claude deployment-package/
          cp README.md CLAUDE.md LICENSE package.json deployment-package/
          
          # Create deployment info
          cat > deployment-package/deployment.json << EOF
          {
            "environment": "${{ github.event.inputs.test_environment }}",
            "version": "test-${{ github.run_number }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
          }
          EOF
          
          echo "✅ Deployment package created"

      - name: Test health checks
        run: |
          echo "🏥 Running health checks..."
          
          # Verify all required files exist
          REQUIRED_FILES=(
            "deployment-package/prompts"
            "deployment-package/.claude/commands"
            "deployment-package/.claude/config.json"
            "deployment-package/README.md"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -e "$file" ]; then
              echo "✅ Found: $file"
            else
              echo "❌ Missing: $file"
              exit 1
            fi
          done
          
          echo "✅ All health checks passed"

  # Test artifact handling using reusable workflow
  test-artifacts:
    name: Test Artifact Handling
    needs: [test-deployment]
    uses: ./.github/workflows/reusable/artifact-handling.yml
    with:
      artifact-name: test-deployment-${{ github.run_number }}
      artifact-path: deployment-package
      retention-days: 1

  # Final test report
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
    needs: [test-validation, test-security, test-deployment, test-artifacts]
    if: always()
    
    steps:
      - name: Generate comprehensive test report
        env:
          VALIDATION_STATUS: ${{ needs.test-validation.outputs.validation-status }}
          VALIDATION_ERRORS: ${{ needs.test-validation.outputs.error-count }}
          VALIDATION_WARNINGS: ${{ needs.test-validation.outputs.warning-count }}
          SECURITY_STATUS: ${{ needs.test-security.outputs.security-status }}
          DEPLOYMENT_STATUS: ${{ needs.test-deployment.result }}
          ARTIFACT_STATUS: ${{ needs.test-artifacts.result }}
          TEST_ENVIRONMENT: ${{ github.event.inputs.test_environment }}
          FULL_SUITE: ${{ github.event.inputs.run_full_suite }}
        run: |
          # Generate test report
          cat << EOF >> $GITHUB_STEP_SUMMARY
          # 🧪 CI/CD Pipeline Test Report
          
          ## 📋 Test Configuration
          - **Environment**: $TEST_ENVIRONMENT
          - **Full Suite**: $FULL_SUITE
          - **Run ID**: ${{ github.run_id }}
          
          ## 🎯 Test Results
          
          | Component | Status | Details |
          |-----------|---------|---------|
          | Validation Pipeline | $VALIDATION_STATUS | Errors: $VALIDATION_ERRORS, Warnings: $VALIDATION_WARNINGS |
          | Security Scanning | $SECURITY_STATUS | All security checks |
          | Deployment Prep | $DEPLOYMENT_STATUS | Package creation and health checks |
          | Artifact Handling | $ARTIFACT_STATUS | Archive and upload |
          
          ## 📊 Overall Result
          EOF
          
          # Determine overall result
          if [ "$VALIDATION_STATUS" = "passed" ] && \
             [ "$SECURITY_STATUS" = "passed" ] && \
             [ "$DEPLOYMENT_STATUS" = "success" ] && \
             [ "$ARTIFACT_STATUS" = "success" ]; then
            echo "### ✅ All CI/CD tests PASSED" >> $GITHUB_STEP_SUMMARY
            echo "🎉 CI/CD pipeline tests completed successfully"
          else
            echo "### ❌ Some CI/CD tests FAILED" >> $GITHUB_STEP_SUMMARY
            echo "💥 CI/CD tests failed - review results above"
            exit 1
          fi