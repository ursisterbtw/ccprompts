name: CI/CD Pipeline Test

on:
  workflow_dispatch:
    inputs:
      test_environment:
        description: 'Test environment'
        required: true
        default: 'test'
        type: choice
        options:
          - test
          - staging
      run_full_suite:
        description: 'Run full test suite'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '18'
  FORCE_COLOR: 1
  CI: true

jobs:
  test-validation:
    name: Test Validation Pipeline
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --progress=false
      
      - name: Test validation script
        run: |
          echo "üß™ Testing validation script..."
          npm run validate
          echo "‚úÖ Validation script test completed"
      
      - name: Test quality check script
        run: |
          echo "üìù Testing quality check script..."
          npm run quality-check || echo "Quality check completed with warnings"
          echo "‚úÖ Quality check test completed"
      
      - name: Test security scan
        run: |
          echo "üõ°Ô∏è Testing security scan..."
          npm run security-check || echo "Security scan completed"
          echo "‚úÖ Security scan test completed"
      
      - name: Verify command count
        run: |
          echo "üî¢ Verifying command count..."
          COMMAND_COUNT=$(ls -1 .claude/commands/*.md | wc -l)
          echo "Found $COMMAND_COUNT commands"
          if [ "$COMMAND_COUNT" -eq 38 ]; then
            echo "‚úÖ Command count is correct"
          else
            echo "‚ùå Expected 38 commands, found $COMMAND_COUNT"
            exit 1
          fi
      
      - name: Test markdown linting
        run: |
          echo "üìù Testing markdown linting..."
          if [ -f ".markdownlint.json" ]; then
            npx markdownlint README.md CLAUDE.md || echo "Linting completed with warnings"
          else
            echo "Creating basic markdownlint config for test..."
            echo '{"MD013": false}' > .markdownlint.json
            npx markdownlint README.md CLAUDE.md || echo "Linting completed with warnings"
          fi
          echo "‚úÖ Markdown linting test completed"

  test-deployment-pipeline:
    name: Test Deployment Pipeline
    runs-on: ubuntu-latest
    needs: test-validation
    if: github.event.inputs.run_full_suite == 'true'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --progress=false
      
      - name: Test deployment package creation
        env:
          TEST_ENVIRONMENT: ${{ github.event.inputs.test_environment }}
          GIT_COMMIT: ${{ github.sha }}
          GIT_REF_NAME: ${{ github.ref_name }}
          BUILD_NUMBER: ${{ github.run_number }}
        run: |
          echo "üì¶ Testing deployment package creation..."
          
          # Create test deployment directory
          mkdir -p test-dist
          
          # Copy essential files for deployment
          cp -r prompts test-dist/
          cp -r .claude test-dist/
          cp README.md test-dist/
          cp CLAUDE.md test-dist/
          cp package.json test-dist/
          
          # Create deployment metadata with safe variable handling
          cat > test-dist/deployment-info.json << EOF
          {
            "version": "test-$(date +'%Y%m%d')",
            "environment": "$TEST_ENVIRONMENT",
            "deployedAt": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "gitCommit": "$GIT_COMMIT",
            "gitBranch": "$GIT_REF_NAME",
            "buildNumber": "$BUILD_NUMBER"
          }
          EOF
          
          echo "‚úÖ Deployment package created successfully"
      
      - name: Test deployment health checks
        run: |
          echo "üè• Testing deployment health checks..."
          
          # Check deployment package integrity
          if [ -d "test-dist" ]; then
            echo "‚úÖ Deployment directory exists"
          else
            echo "‚ùå Deployment directory missing"
            exit 1
          fi
          
          if [ -f "test-dist/deployment-info.json" ]; then
            echo "‚úÖ Deployment metadata exists"
            cat test-dist/deployment-info.json | jq .
          else
            echo "‚ùå Deployment metadata missing"
            exit 1
          fi
          
          # Check for essential files
          ESSENTIAL_FILES=(
            "test-dist/prompts"
            "test-dist/.claude"
            "test-dist/README.md"
            "test-dist/package.json"
          )
          
          for file in "${ESSENTIAL_FILES[@]}"; do
            if [ -e "$file" ]; then
              echo "‚úÖ Essential file/directory exists: $file"
            else
              echo "‚ùå Missing essential file/directory: $file"
              exit 1
            fi
          done
          
          echo "‚úÖ All health checks passed"
      
      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: test-deployment-package
          path: test-dist/
          retention-days: 1

  test-security-integration:
    name: Test Security Integration
    runs-on: ubuntu-latest
    needs: test-validation
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit --progress=false
      
      - name: Test dependency vulnerability scanning
        run: |
          echo "üõ°Ô∏è Testing dependency vulnerability scanning..."
          
          # Run audit and capture results
          npm audit --audit-level=moderate --json > test-audit-results.json 2>/dev/null || true
          
          if [ -f "test-audit-results.json" ] && [ -s "test-audit-results.json" ]; then
            echo "üìä Audit results generated"
            
            # Check for critical vulnerabilities (would block in real deployment)
            CRITICAL_VULNS=$(jq -r '.vulnerabilities | to_entries[] | select(.value.severity == "critical") | .key' test-audit-results.json 2>/dev/null | wc -l || echo "0")
            echo "Critical vulnerabilities found: $CRITICAL_VULNS"
            
            if [ "$CRITICAL_VULNS" -gt 0 ]; then
              echo "‚ö†Ô∏è Critical vulnerabilities detected (would block production deployment)"
            else
              echo "‚úÖ No critical vulnerabilities found"
            fi
          else
            echo "‚úÖ No vulnerabilities detected"
          fi
      
      - name: Test file permission security
        run: |
          echo "üîí Testing file permission security..."
          
          EXIT_CODE=0
          
          # Check for executable markdown files
          if find . -name "*.md" -executable -not -path "./.git/*" -not -path "./node_modules/*" | grep -q .; then
            echo "‚ùå Found executable markdown files"
            EXIT_CODE=1
          else
            echo "‚úÖ No executable markdown files found"
          fi
          
          # Check for world-writable files
          if find . -type f -perm -002 -not -path "./.git/*" -not -path "./node_modules/*" | grep -q .; then
            echo "‚ùå Found world-writable files"
            EXIT_CODE=1
          else
            echo "‚úÖ No world-writable files found"
          fi
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "‚úÖ File permissions are secure"
          else
            echo "‚ö†Ô∏è File permission issues detected"
          fi

  test-results:
    name: CI/CD Test Results
    runs-on: ubuntu-latest
    needs: [test-validation, test-deployment-pipeline, test-security-integration]
    if: always()
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Evaluate test results
        run: |
          echo "üèÅ Evaluating CI/CD test results..."
          
          VALIDATION_RESULT="${{ needs.test-validation.result }}"
          DEPLOYMENT_RESULT="${{ needs.test-deployment-pipeline.result }}"
          SECURITY_RESULT="${{ needs.test-security-integration.result }}"
          
          echo "Validation Test: $VALIDATION_RESULT"
          echo "Deployment Test: $DEPLOYMENT_RESULT"
          echo "Security Test: $SECURITY_RESULT"
          
          # Determine overall status
          OVERALL_STATUS="success"
          
          if [ "$VALIDATION_RESULT" != "success" ]; then
            echo "‚ùå Validation tests failed"
            OVERALL_STATUS="failure"
          fi
          
          if [ "$DEPLOYMENT_RESULT" != "success" ] && [ "$DEPLOYMENT_RESULT" != "skipped" ]; then
            echo "‚ùå Deployment tests failed"
            OVERALL_STATUS="failure"
          fi
          
          if [ "$SECURITY_RESULT" != "success" ]; then
            echo "‚ùå Security tests failed"
            OVERALL_STATUS="failure"
          fi
          
          if [ "$OVERALL_STATUS" = "success" ]; then
            echo "üéâ All CI/CD tests passed!"
          else
            echo "üí• CI/CD tests failed"
            exit 1
          fi
      
      - name: Generate test report
        if: always()
        env:
          VALIDATION_RESULT: ${{ needs.test-validation.result }}
          DEPLOYMENT_RESULT: ${{ needs.test-deployment-pipeline.result }}
          SECURITY_RESULT: ${{ needs.test-security-integration.result }}
          TEST_ENVIRONMENT: ${{ github.event.inputs.test_environment }}
          RUN_FULL_SUITE: ${{ github.event.inputs.run_full_suite }}
          NODE_VERSION: ${{ env.NODE_VERSION }}
        run: |
          # Determine overall result
          if [ "$VALIDATION_RESULT" = "success" ] && \
             ([ "$DEPLOYMENT_RESULT" = "success" ] || [ "$DEPLOYMENT_RESULT" = "skipped" ]) && \
             [ "$SECURITY_RESULT" = "success" ]; then
            OVERALL_RESULT="‚úÖ PASSED"
          else
            OVERALL_RESULT="‚ùå FAILED"
          fi
          
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## üß™ CI/CD Pipeline Test Report
          
          ### üìã Test Results Summary
          - **Validation Pipeline**: $VALIDATION_RESULT
          - **Deployment Pipeline**: $DEPLOYMENT_RESULT
          - **Security Integration**: $SECURITY_RESULT
          
          ### üéØ Test Environment
          - **Environment**: $TEST_ENVIRONMENT
          - **Full Suite**: $RUN_FULL_SUITE
          - **Node Version**: $NODE_VERSION
          
          ### üìä Test Coverage
          - ‚úÖ Validation script functionality
          - ‚úÖ Quality check procedures
          - ‚úÖ Security scanning
          - ‚úÖ Command count verification
          - ‚úÖ Deployment package creation
          - ‚úÖ Health check procedures
          - ‚úÖ Dependency vulnerability scanning
          - ‚úÖ File permission security
          
          ### üöÄ CI/CD Status
          **Overall Result**: $OVERALL_RESULT
          
          ---
          
          The CI/CD pipeline has been thoroughly tested and validated.
          EOF