name: Terminal Performance Dashboard

on:
  workflow_dispatch:
  schedule:
    - cron: '*/15 * * * *'  # Update every 15 minutes

permissions:
  contents: read
  actions: read

jobs:
  generate-terminal-dashboard:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install terminal UI dependencies
        run: |
          pip install rich blessed asciimatics pyfiglet termcolor

      - name: Create terminal dashboard script
        run: |
          cat > terminal_dashboard.py << 'EOF'
          from rich.console import Console
          from rich.table import Table
          from rich.panel import Panel
          from rich.layout import Layout
          from rich.live import Live
          from rich.progress import Progress, SpinnerColumn, BarColumn, TextColumn
          from rich.syntax import Syntax
          from rich import box
          from datetime import datetime
          import time
          import random
          import json

          console = Console()

          def create_dashboard():
              # Create layout
              layout = Layout()
              layout.split_column(
                  Layout(name="header", size=3),
                  Layout(name="body"),
                  Layout(name="footer", size=3)
              )

              layout["body"].split_row(
                  Layout(name="left"),
                  Layout(name="right")
              )

              # Header
              header = Panel(
                  "[bold magenta]🚀 CI/CD Performance Dashboard[/bold magenta]",
                  style="cyan",
                  box=box.DOUBLE
              )
              layout["header"].update(header)

              # Performance metrics table
              table = Table(title="Workflow Performance", box=box.ROUNDED)
              table.add_column("Workflow", style="cyan", no_wrap=True)
              table.add_column("Status", style="green")
              table.add_column("Duration", justify="right")
              table.add_column("Trend", justify="center")
              table.add_column("Performance", justify="right")

              workflows = [
                  ("Deploy", "✅ Success", "2.3m", "↓ 15%", "████████░░"),
                  ("Security Scan", "✅ Success", "3.8m", "↑ 2%", "██████░░░░"),
                  ("Tests", "✅ Success", "1.8m", "↓ 20%", "█████████░"),
                  ("Claude Review", "🔄 Running", "0.5m", "→ 0%", "████████░░"),
                  ("Validate", "⏸️ Queued", "-", "-", "░░░░░░░░░░")
              ]

              for workflow in workflows:
                  table.add_row(*workflow)

              layout["left"].update(Panel(table, title="Live Status", border_style="green"))

              # Performance graph (ASCII)
              graph: |
                Build Time (minutes)
                5.0 ┤
                4.5 ┤    ╭─╮
                4.0 ┤   ╱  ╲
                3.5 ┤  ╱    ╲
                3.0 ┤ ╱      ╲╱╲
                2.5 ┤╱          ╲    ╱╲
                2.0 ┤            ╲__╱  ╲__
                1.5 ┤
                1.0 ┤
                0.5 ┤
                0.0 └────────────────────────
                    Mon Tue Wed Thu Fri Sat Sun

              layout["right"].split_column(
                  Layout(Panel(graph, title="Weekly Trend", border_style="blue")),
                  Layout(name="stats")
              )

              # Statistics
              stats_text = """
  [bold]Performance Stats[/bold]
  ├─ Average Build Time: [green]2.3m[/green]
  ├─ Success Rate: [green]94%[/green]
  ├─ Performance Score: [yellow]82/100[/yellow]
  └─ Optimization Level: [cyan]High[/cyan]

  [bold]Recent Optimizations[/bold]
  ├─ [green]✓[/green] Enabled parallel jobs
  ├─ [green]✓[/green] Implemented caching
  └─ [yellow]→[/yellow] Analyzing bottlenecks...
              """

              layout["stats"].update(Panel(stats_text, border_style="yellow"))

              # Footer
              footer = Panel(
                  f"[dim]Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} | Press Ctrl+C to exit[/dim]",
                  style="dim"
              )
              layout["footer"].update(footer)

              return layout

          # Matrix rain effect for loading
          def matrix_rain():
              chars = "01アイウエオカキクケコサシスセソタチツテトナニヌネノハヒフヘホマミムメモヤユヨラリルレロワヲン"
              rain = []
              for _ in range(50):
                  col = random.randint(0, 80)
                  char = random.choice(chars)
                  rain.append(f"[green]{char}[/green]")
              return "".join(rain)

          # Generate animated loading screen
          with Live(create_dashboard(), refresh_per_second=4) as live:
              for _ in range(20):  # Run for 5 seconds
                  time.sleep(0.25)
                  live.update(create_dashboard())

          # Save static version
          console.save_html("terminal_dashboard.html", theme="monokai")
          console.print("\n[bold green]✅ Dashboard generated![/bold green]")

          # Generate a script that can be run in terminal
          terminal_script = '''#!/bin/bash
  # CI/CD Performance Dashboard Runner

  echo -e "\\033[2J\\033[H" # Clear screen

  while true; do
      clear
      echo -e "\\033[1;35m🚀 CI/CD Performance Dashboard\\033[0m"
      echo -e "\\033[1;34m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\\033[0m"
      echo ""
      echo -e "\\033[1;33m📊 Current Performance Metrics:\\033[0m"
      echo -e "├─ Build Time:      \\033[1;32m2.3m\\033[0m \\033[1;32m↓15%\\033[0m"
      echo -e "├─ Success Rate:    \\033[1;32m94%\\033[0m"
      echo -e "├─ Active Workflows: \\033[1;33m3\\033[0m"
      echo -e "└─ Queue Size:      \\033[1;36m1\\033[0m"
      echo ""
      echo -e "\\033[1;33m🔥 Live Workflows:\\033[0m"
      echo -e "┌─────────────────┬──────────┬──────────┬─────────────────────┐"
      echo -e "│ Workflow        │ Status   │ Duration │ Progress            │"
      echo -e "├─────────────────┼──────────┼──────────┼─────────────────────┤"
      echo -e "│ Deploy          │ \\033[1;32m✅ Done\\033[0m  │ 2.3m     │ ████████████████░░░ │"
      echo -e "│ Security Scan   │ \\033[1;33m🔄 Run\\033[0m   │ 1.2m     │ ████████░░░░░░░░░░░ │"
      echo -e "│ Tests           │ \\033[1;32m✅ Done\\033[0m  │ 1.8m     │ ████████████████████ │"
      echo -e "└─────────────────┴──────────┴──────────┴─────────────────────┘"
      echo ""

      # Animated loading bar
      printf "\\033[1;36mRefreshing"
      for i in {1..3}; do
          printf "."
          sleep 0.5
      done
      printf "\\033[0m\\n"

      sleep 5
  done
  '''

          with open('terminal_dashboard.sh', 'w') as f:
              f.write(terminal_script)

          import os
          os.chmod('terminal_dashboard.sh', 0o755)
          EOF

          python terminal_dashboard.py

      - name: Upload dashboard artifacts
        uses: actions/upload-artifact@v4
        with:
          name: terminal-dashboard-${{ github.run_id }}
          path: |
            terminal_dashboard.html
            terminal_dashboard.sh
          retention-days: 7