name: 'Tier 2: Multi-Environment Testing Matrix'

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# Requires Tier 1 to pass first
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write

env:
  FORCE_COLOR: 3
  
jobs:
  # Wait for Tier 1 quality gate to pass
  check-prerequisites:
    name: Check Prerequisites
    runs-on: ubuntu-latest
    outputs:
      tier1-passed: ${{ steps.check.outputs.passed }}
    
    steps:
      - name: Check Tier 1 Status
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const runs = await github.rest.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: '01-security-quality.yml',
              head_sha: context.sha,
              status: 'completed'
            });
            
            const latestRun = runs.data.workflow_runs[0];
            const passed = latestRun && latestRun.conclusion === 'success';
            
            core.setOutput('passed', passed);
            
            if (!passed) {
              core.setFailed('Tier 1 Security & Quality Gate must pass before running tests');
            }

  # Comprehensive testing across multiple environments
  test-matrix:
    name: Test Node ${{ matrix.node }} on ${{ matrix.os }} with ${{ matrix.package-manager }}
    runs-on: ${{ matrix.os }}
    needs: check-prerequisites
    if: needs.check-prerequisites.outputs.tier1-passed == 'true'
    timeout-minutes: 15
    
    strategy:
      fail-fast: false  # Continue testing other combinations even if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: [16, 18, 20, 22]
        package-manager: [npm, bun]
        exclude:
          # Reduce matrix size by excluding less critical combinations
          - os: windows-latest
            node: 16
          - os: macos-latest
            node: 16
          - os: windows-latest
            package-manager: bun  # Bun has Windows issues
        include:
          # Add yarn for critical combinations
          - os: ubuntu-latest
            node: 20
            package-manager: yarn
            
    env:
      NODE_ENV: test
      CI: true
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: ${{ matrix.package-manager }}
          
      - name: Setup Bun (if needed)
        if: matrix.package-manager == 'bun'
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: Install dependencies
        run: |
          if [ "${{ matrix.package-manager }}" == "npm" ]; then
            npm ci
          elif [ "${{ matrix.package-manager }}" == "bun" ]; then
            bun install --frozen-lockfile
          elif [ "${{ matrix.package-manager }}" == "yarn" ]; then
            yarn install --frozen-lockfile
          fi
        shell: bash
        
      - name: Run linting
        run: |
          if [ "${{ matrix.package-manager }}" == "bun" ]; then
            bun run lint
          else
            npm run lint
          fi
        shell: bash
        
      - name: Run unit tests
        run: |
          if [ "${{ matrix.package-manager }}" == "bun" ]; then
            bun test
          else
            npm test
          fi
        shell: bash
        
      - name: Run MCP server tests
        run: |
          if [ "${{ matrix.package-manager }}" == "bun" ]; then
            bun run mcp:test
          else
            npm run mcp:test
          fi
        shell: bash
        
      - name: Test configuration loading
        run: |
          # Test ConfigManager with different configurations
          node ci/scripts/config-test.js
          
      - name: Test command registry
        run: |
          # Test CommandRegistry functionality
          node ci/scripts/registry-test.js
          
      - name: Environment-specific tests
        run: |
          # Run OS-specific compatibility tests
          node ci/scripts/platform-compatibility-test.js ${{ matrix.os }}
          
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node }}-${{ matrix.package-manager }}
          path: |
            ci/reports/test-results.xml
            ci/reports/platform-compatibility.json
          retention-days: 14

  # Integration testing with real MCP servers
  mcp-integration:
    name: MCP Server Integration Tests
    runs-on: ubuntu-latest
    needs: check-prerequisites
    if: needs.check-prerequisites.outputs.tier1-passed == 'true'
    timeout-minutes: 10
    
    services:
      # Mock MCP servers for testing
      test-mcp-server:
        image: node:20-alpine
        options: >-
          --health-cmd "node --version"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup test MCP servers
        run: |
          # Start mock MCP servers for integration testing
          node ci/scripts/setup-test-mcp-servers.js &
          sleep 5  # Wait for servers to start
          
      - name: Run MCP integration tests
        run: |
          # Test real MCP server communication
          node ci/scripts/mcp-integration-test.js
          
      - name: Test command execution
        run: |
          # Test actual command execution in controlled environment
          node ci/scripts/command-execution-test.js
          
      - name: Cleanup test servers
        if: always()
        run: |
          # Clean up any running test servers
          pkill -f "test-mcp-server" || true

  # Performance baseline testing
  performance-baseline:
    name: Performance Baseline Testing
    runs-on: ubuntu-latest
    needs: check-prerequisites
    if: needs.check-prerequisites.outputs.tier1-passed == 'true'
    timeout-minutes: 12
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run performance benchmarks
        run: |
          # Execute performance benchmarks
          node ci/scripts/performance-benchmark.js
          
      - name: Compare with baseline
        run: |
          # Compare current performance with stored baselines
          node ci/scripts/performance-comparison.js
          
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: ci/reports/performance/
          retention-days: 30

  # Consolidate results from all test matrix runs
  test-results:
    name: Test Results Summary
    runs-on: ubuntu-latest
    needs: [test-matrix, mcp-integration, performance-baseline]
    if: always()
    
    steps:
      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        
      - name: Generate test report
        run: |
          # Create comprehensive test report
          node ci/scripts/test-report-generator.js
          
      - name: Comment test summary on PR
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: ci/reports/test-summary.md
          
      - name: Update commit status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const fs = require('fs');
            const testsPassed = fs.existsSync('ci/reports/tests-passed.flag');
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha,
              state: testsPassed ? 'success' : 'failure',
              context: 'Test Matrix',
              description: testsPassed ? 'All tests passed across environments' : 'Test failures detected'
            });
            
      - name: Fail if tests failed
        run: |
          if [ ! -f "ci/reports/tests-passed.flag" ]; then
            echo "❌ Tests failed across one or more environments"
            exit 1
          else
            echo "✅ All tests passed across all environments"
          fi