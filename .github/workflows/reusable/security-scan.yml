name: Security Scanning

on:
  workflow_call:
    inputs:
      enable-dependency-scan:
        description: 'Enable dependency vulnerability scanning'
        required: false
        type: boolean
        default: true
      enable-secret-scan:
        description: 'Enable secret scanning'
        required: false
        type: boolean
        default: true
      enable-file-permission-check:
        description: 'Enable file permission security check'
        required: false
        type: boolean
        default: true
      enable-sarif-upload:
        description: 'Enable SARIF results upload to GitHub Security'
        required: false
        type: boolean
        default: true
      fail-on-severity:
        description: 'Minimum severity to fail the workflow (low, medium, high, critical)'
        required: false
        type: string
        default: 'high'
      scan-timeout:
        description: 'Timeout for security scans in minutes'
        required: false
        type: number
        default: 30
    outputs:
      vulnerabilities-found:
        description: 'Whether vulnerabilities were found'
        value: ${{ jobs.scan.outputs.summary }}
      security-status:
        description: 'Overall security scan status'
        value: ${{ jobs.scan.outputs.summary }}
      sarif-file:
        description: 'Path to generated SARIF file'
        value: ${{ jobs.scan.outputs.sarif-generation }}
      scan-summary:
        description: 'Security scan summary'
        value: ${{ jobs.scan.outputs.summary }}

env:
  SECURITY_SCAN_VERSION: v4

jobs:
  scan:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.scan-timeout }}
    permissions:
      contents: read
      security-events: write
    outputs:
      dep-scan: ${{ steps.dep-scan.outputs.vulnerabilities }}
      secret-scan: ${{ steps.secret-scan.outputs.secrets_found }}
      permission-check: ${{ steps.permission-check.outputs.permission_issues }}
      sarif-generation: ${{ steps.sarif-generation.outputs.sarif-file }}
      summary: ${{ steps.summary.outputs.summary }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0              # Full history for comprehensive analysis

      - name: Cache security tools and databases
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/.npm
            /tmp/security-cache
            /opt/security-tools
          key: security-tools-${{ env.SECURITY_SCAN_VERSION }}-${{ runner.os }}-${{ hashFiles('**/requirements.txt', '**/package-lock.json') }}
          restore-keys: |
            security-tools-${{ env.SECURITY_SCAN_VERSION }}-${{ runner.os }}-
            security-tools-${{ env.SECURITY_SCAN_VERSION }}-

      - name: Setup Node.js
        if: inputs.enable-dependency-scan
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Dependency vulnerability scan
        if: inputs.enable-dependency-scan
        id: dep-scan
        run: |
          echo "[SCAN] Scanning for dependency vulnerabilities..."

          # Check for npm audit
          set +e
          npm audit --production --audit-level=high > audit-report.txt 2>&1
          AUDIT_EXIT_CODE=$?
          set -e

          if [ $AUDIT_EXIT_CODE -eq 0 ]; then
            echo "[OK] No high or critical vulnerabilities found"
            echo "dep_vulnerabilities=false" >> $GITHUB_ENV
            echo "vulnerabilities=false" >> $GITHUB_OUTPUT
          else
            echo "[ERROR] Vulnerabilities detected in dependencies"
            cat audit-report.txt
            echo "dep_vulnerabilities=true" >> $GITHUB_ENV
            echo "vulnerabilities=true" >> $GITHUB_OUTPUT
          fi

      - name: Secret scanning
        if: inputs.enable-secret-scan
        id: secret-scan
        run: |
          echo "[SCAN] Scanning for hardcoded secrets..."

          # Simple pattern-based secret detection
          SECRET_PATTERNS=(
            "password.*=.*['\"][^'\"]{8,}['\"]"
            "api[_-]?key.*=.*['\"][^'\"]{16,}['\"]"
            "secret.*=.*['\"][^'\"]{8,}['\"]"
            "token.*=.*['\"][^'\"]{16,}['\"]"
            "-----BEGIN.*PRIVATE KEY-----"
          )

          SECRETS_FOUND=false
          for pattern in "${SECRET_PATTERNS[@]}"; do
            if grep -r -E "$pattern" --include="*.js" --include="*.json" --include="*.yml" --include="*.yaml" --include="*.md" --exclude-dir=node_modules --exclude-dir=.git .; then
              SECRETS_FOUND=true
              echo "[WARNING] Potential secret found matching pattern: $pattern"
            fi
          done

          if [ "$SECRETS_FOUND" = "true" ]; then
            echo "[ERROR] Potential secrets detected"
            echo "secrets_found=true" >> $GITHUB_ENV
            echo "secrets_found=true" >> $GITHUB_OUTPUT
          else
            echo "[OK] No secrets detected"
            echo "secrets_found=false" >> $GITHUB_ENV
            echo "secrets_found=false" >> $GITHUB_OUTPUT
          fi

      - name: File permission security check
        if: inputs.enable-file-permission-check
        id: permission-check
        run: |
          echo "[SCAN] Checking file permissions..."

          # Find files with overly permissive permissions
          PERMISSION_ISSUES=false

          # Check for world-writable files
          if find . -type f -perm -002 -not -path "./node_modules/*" -not -path "./.git/*" | grep .; then
            echo "[ERROR] World-writable files detected"
            PERMISSION_ISSUES=true
          fi

          # Check for executable files that shouldn't be
          if find . -name "*.md" -o -name "*.json" -o -name "*.yml" -o -name "*.yaml" | xargs -I {} test -x {} && echo "{}"; then
            echo "[WARNING] Unexpected executable files detected"
            PERMISSION_ISSUES=true
          fi

          if [ "$PERMISSION_ISSUES" = "true" ]; then
            echo "permission_issues=true" >> $GITHUB_ENV
            echo "permission_issues=true" >> $GITHUB_OUTPUT
          else
            echo "[OK] File permissions look secure"
            echo "permission_issues=false" >> $GITHUB_ENV
            echo "permission_issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate SARIF report
        id: sarif-generation
        if: inputs.enable-sarif-upload && (env.dep_vulnerabilities == 'true' || env.secrets_found == 'true')
        run: |
          echo "[GENERATE] Generating SARIF report..."

          # Create SARIF structure
          cat > security-scan.sarif << 'EOF'
          {
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Custom Security Scanner",
                    "version": "${{ env.SECURITY_SCAN_VERSION }}",
                    "informationUri": "https://github.com/${{ github.repository }}"
                  }
                },
                "results": []
              }
            ]
          }
          EOF

          echo "sarif-file=security-scan.sarif" >> $GITHUB_OUTPUT
          echo "[OK] SARIF report generated"

      - name: Upload SARIF to GitHub Security
        if: inputs.enable-sarif-upload && steps.sarif-generation.outputs.sarif-file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.sarif-generation.outputs.sarif-file }}
          category: custom-security-scan

      - name: Generate security summary
        id: summary
        if: always()
        run: |
          # Determine overall status
          VULNERABILITIES_FOUND=false
          SECURITY_STATUS="passed"
          SCAN_SUMMARY=""

          if [ "${{ env.dep_vulnerabilities }}" = "true" ] || \
             [ "${{ env.secrets_found }}" = "true" ] || \
             [ "${{ env.permission_issues }}" = "true" ]; then
            VULNERABILITIES_FOUND=true
            SECURITY_STATUS="failed"
          fi

          # Check severity threshold
          if [ "${{ inputs.fail-on-severity }}" = "low" ] && [ "$VULNERABILITIES_FOUND" = "true" ]; then
            SECURITY_STATUS="failed"
          fi

          echo "vulnerabilities=$VULNERABILITIES_FOUND" >> $GITHUB_OUTPUT
          echo "status=$SECURITY_STATUS" >> $GITHUB_OUTPUT

          # Generate summary JSON
          SCAN_SUMMARY=$(cat << EOJ
          {
            "dependency_vulnerabilities": "${{ env.dep_vulnerabilities }}",
            "secrets_found": "${{ env.secrets_found }}",
            "permission_issues": "${{ env.permission_issues }}",
            "overall_status": "$SECURITY_STATUS",
            "scan_version": "${{ env.SECURITY_SCAN_VERSION }}"
          }
          EOJ
          )

          echo "summary=$SCAN_SUMMARY" >> $GITHUB_OUTPUT

          # Generate report
          cat << EOF >> $GITHUB_STEP_SUMMARY
          ## [SECURITY] Security Scan Report

          ### Scan Results:
          - **Dependency Vulnerabilities**: ${{ env.dep_vulnerabilities == 'true' && '[ERROR] Found' || '[OK] None' }}
          - **Hardcoded Secrets**: ${{ env.secrets_found == 'true' && '[ERROR] Found' || '[OK] None' }}
          - **File Permissions**: ${{ env.permission_issues == 'true' && '[WARNING] Issues' || '[OK] Secure' }}

          ### Overall Status: ${{ env.security_status == 'passed' && '[OK] PASSED' || '[ERROR] FAILED' }}

          ### Configuration:
          - **Fail on Severity**: ${{ inputs.fail-on-severity }}
          - **SARIF Upload**: ${{ inputs.enable-sarif-upload && 'Enabled' || 'Disabled' }}
          - **Scan Version**: ${{ env.SECURITY_SCAN_VERSION }}
          EOF
